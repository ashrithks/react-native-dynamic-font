{"version":3,"sources":["../src/index.js"],"names":["NativeModules","ReactNativeDynamicFont","loadFont","name","data","type","Error","Promise","resolve","reject","err","givenName","loadFontFromFile","filePath"],"mappings":";AACA,SAASA,aAAT,QAA8B,cAA9B;;AAEA,MAAM,EAAEC,sBAAF,KAA6BD,aAAnC;;AAEA,MAAME,WAAW,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,KAAsB;AACrC,MAAI,CAACF,IAAL,EACE,MAAM,IAAIG,KAAJ,CAAU,6BAAV,CAAN;;AAEF,MAAI,CAACF,IAAL,EACE,MAAM,IAAIE,KAAJ,CAAU,6BAAV,CAAN;;AAEF;AACA,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CR,2BAAuBC,QAAvB,CAAgC;AAC9BC,YAAMA,IADwB;AAE9BC,YAAMA,IAFwB;AAG9BC,YAAMA;AAHwB,KAAhC,EAIG,UAAUK,GAAV,EAAeC,SAAf,EAA0B;AAC3B,UAAID,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACA;AACD;AACDF,cAAQG,SAAR;AACD,KAVD;AAWD,GAZM,CAAP;AAaD,CArBD;;AAyBA,MAAMC,mBAAmB,CAACT,IAAD,EAAOU,QAAP,KAAoB;AAC3C,MAAI,CAACV,IAAL,EACE,MAAM,IAAIG,KAAJ,CAAU,6BAAV,CAAN;;AAEF,MAAI,CAACO,QAAL,EACE,MAAM,IAAIP,KAAJ,CAAU,iCAAV,CAAN;;AAEF,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CR,2BAAuBW,gBAAvB,CAAwC;AACtCT,UADsC;AAEtCU;AAFsC,KAAxC,EAGG,UAAUH,GAAV,EAAeC,SAAf,EAA0B;AAC3B,UAAID,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACA;AACD;AACDF,cAAQG,SAAR;AACD,KATD;AAUD,GAXM,CAAP;AAYD,CAnBD;;AAqBA,SAAST,QAAT,EAAmBU,gBAAnB","file":"index.js","sourcesContent":["\nimport { NativeModules } from 'react-native';\n\nconst { ReactNativeDynamicFont } = NativeModules;\n\nconst loadFont = (name, data, type) => {\n  if (!name)\n    throw new Error('Name is a required argument');\n\n  if (!data)\n    throw new Error('Data is a required argument');\n\n  /* Load font via native binary code */\n  return new Promise(function (resolve, reject) {\n    ReactNativeDynamicFont.loadFont({\n      name: name,\n      data: data,\n      type: type\n    }, function (err, givenName) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(givenName);\n    });\n  });\n}\n\n\n\nconst loadFontFromFile = (name, filePath) => {\n  if (!name)\n    throw new Error('name is a required argument');\n\n  if (!filePath)\n    throw new Error('filePath is a required argument');\n\n  return new Promise(function (resolve, reject) {\n    ReactNativeDynamicFont.loadFontFromFile({\n      name,\n      filePath\n    }, function (err, givenName) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(givenName);\n    });\n  });\n}\n\nexport { loadFont, loadFontFromFile }"]}