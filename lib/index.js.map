{"version":3,"sources":["../src/index.js"],"names":["NativeModules","ReactNativeDynamicFont","loadedFonts","loadFont","name","data","type","forceLoad","Promise","resolve","Error","reject","err","givenName","loadFontFromFile","filePath","loadFonts","_fontList","fontList","Array","all","filter","font","map"],"mappings":";AACA,SAASA,aAAT,QAA8B,cAA9B;;AAEA,MAAM,EAAEC,sBAAF,KAA6BD,aAAnC;AACA,MAAME,cAAc,EAApB;;AAEA,MAAMC,WAAW,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,SAAnB,KAAiC;AAChD;AACA,MAAI,CAACA,SAAD,IAAcL,YAAYE,IAAZ,CAAlB,EACE,OAAOI,QAAQC,OAAR,CAAgBP,YAAYE,IAAZ,CAAhB,CAAP;;AAEF,MAAI,CAACA,IAAL,EACE,MAAM,IAAIM,KAAJ,CAAU,6BAAV,CAAN;;AAEF,MAAI,CAACL,IAAL,EACE,MAAM,IAAIK,KAAJ,CAAU,6BAAV,CAAN;;AAEF;AACA,SAAO,IAAIF,OAAJ,CAAY,UAAUC,OAAV,EAAmBE,MAAnB,EAA2B;AAC5CV,2BAAuBE,QAAvB,CAAgC;AAC9BC,YAAMA,IADwB;AAE9BC,YAAMA,IAFwB;AAG9BC,YAAMA;AAHwB,KAAhC,EAIG,UAAUM,GAAV,EAAeC,SAAf,EAA0B;AAC3B,UAAID,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACA;AACD;AACD;AACAV,kBAAYE,IAAZ,IAAoBS,SAApB;AACAJ,cAAQI,SAAR;AACD,KAZD;AAaD,GAdM,CAAP;AAeD,CA3BD;;AA+BA,MAAMC,mBAAmB,CAACV,IAAD,EAAOW,QAAP,KAAoB;AAC3C,MAAI,CAACX,IAAL,EACE,MAAM,IAAIM,KAAJ,CAAU,6BAAV,CAAN;;AAEF,MAAI,CAACK,QAAL,EACE,MAAM,IAAIL,KAAJ,CAAU,iCAAV,CAAN;;AAEF,SAAO,IAAIF,OAAJ,CAAY,UAAUC,OAAV,EAAmBE,MAAnB,EAA2B;AAC5CV,2BAAuBa,gBAAvB,CAAwC;AACtCV,UADsC;AAEtCW;AAFsC,KAAxC,EAGG,UAAUH,GAAV,EAAeC,SAAf,EAA0B;AAC3B,UAAID,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACA;AACD;AACDH,cAAQI,SAAR;AACD,KATD;AAUD,GAXM,CAAP;AAYD,CAnBD;;AAqBA,MAAMG,YAAY,CAACC,SAAD,EAAYV,SAAZ,KAA0B;AAC1C,MAAIW,WAAWD,SAAf;AACA,MAAI,CAACC,QAAL,EACE,OAAOV,QAAQC,OAAR,CAAgB,EAAhB,CAAP;;AAEF,MAAI,EAAES,oBAAoBC,KAAtB,CAAJ,EACED,WAAW,CAACA,QAAD,CAAX;;AAEF,SAAOV,QAAQY,GAAR,CAAYF,SAASG,MAAT,CAAiBC,IAAD,IAAUA,IAA1B,EAAgCC,GAAhC,CAAqCD,IAAD,IAAUnB,SAASmB,KAAKlB,IAAd,EAAoBkB,KAAKjB,IAAzB,EAA+BiB,KAAKhB,IAApC,EAA0CC,SAA1C,CAA9C,CAAZ,CAAP;AACD,CATD;;AAWA,SAASJ,QAAT,EAAmBa,SAAnB,EAA8BF,gBAA9B","file":"index.js","sourcesContent":["\nimport { NativeModules } from 'react-native';\n\nconst { ReactNativeDynamicFont } = NativeModules;\nconst loadedFonts = {};\n\nconst loadFont = (name, data, type, forceLoad) => {\n  /* Check if this font was already loaded */\n  if (!forceLoad && loadedFonts[name])\n    return Promise.resolve(loadedFonts[name]);\n\n  if (!name)\n    throw new Error('Name is a required argument');\n\n  if (!data)\n    throw new Error('Data is a required argument');\n\n  /* Load font via native binary code */\n  return new Promise(function (resolve, reject) {\n    ReactNativeDynamicFont.loadFont({\n      name: name,\n      data: data,\n      type: type\n    }, function (err, givenName) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      /* Loaded successfully... resolve promise with \"real\" font name */\n      loadedFonts[name] = givenName;\n      resolve(givenName);\n    });\n  });\n}\n\n\n\nconst loadFontFromFile = (name, filePath) => {\n  if (!name)\n    throw new Error('name is a required argument');\n\n  if (!filePath)\n    throw new Error('filePath is a required argument');\n\n  return new Promise(function (resolve, reject) {\n    ReactNativeDynamicFont.loadFontFromFile({\n      name,\n      filePath\n    }, function (err, givenName) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(givenName);\n    });\n  });\n}\n\nconst loadFonts = (_fontList, forceLoad) => {\n  var fontList = _fontList;\n  if (!fontList)\n    return Promise.resolve([]);\n\n  if (!(fontList instanceof Array))\n    fontList = [fontList];\n\n  return Promise.all(fontList.filter((font) => font).map((font) => loadFont(font.name, font.data, font.type, forceLoad)));\n}\n\nexport { loadFont, loadFonts, loadFontFromFile }"]}